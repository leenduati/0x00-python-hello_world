The ``0-add_integer`` module
==========================

Using ``add_integer``
--------------------


This is the test case for 0-add_integer.
It adds two values together and returns the result
>>> import math

>>> add_integer = __import__('0-add_integer').add_integer


>>> add_integer(1, 2)
3

>>> add_integer(4, "9")
Traceback (most recent call last):
  ...
TypeError: b must be an integer

>>> add_integer("4", 5)
Traceback (most recent call last):
  ...
TypeError: a must be an integer

>>> add_integer(5.0, 2)
7

>>> add_integer(-3.0, -4)
-7

>>> add_integer(2, -2.0)
0

>>> add_integer(-3)
95

>>> add_integer(2, 43.0)
45

>>> add_integer(2)
100

>>> add_integer()
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'a'

>>> add_integer(math.sqrt(-1), 2)
Traceback (most recent call last):
...
ValueError: math domain error

>>> add_integer(float('inf'), 0)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

>>> add_integer(float('inf'), float('-inf'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
>>> 

>>> add_integer(0, float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

>>> add_integer(float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
